### Starting build.
# Target: server_example.ml.depends, tags: { package(cohttp.lwt), package(ppx_deriving_yojson), package(yojson), extension:ml, file:server_example.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package yojson -package ppx_deriving_yojson -package cohttp.lwt -modules server_example.ml > server_example.ml.depends
# Target: main.ml.depends, tags: { package(cohttp.lwt), package(ppx_deriving_yojson), package(yojson), extension:ml, file:main.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package yojson -package ppx_deriving_yojson -package cohttp.lwt -modules main.ml > main.ml.depends
# Target: board.mli.depends, tags: { package(cohttp.lwt), package(ppx_deriving_yojson), package(yojson), extension:mli, file:board.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package yojson -package ppx_deriving_yojson -package cohttp.lwt -modules board.mli > board.mli.depends
# Target: boardType.ml.depends, tags: { package(cohttp.lwt), package(ppx_deriving_yojson), package(yojson), extension:ml, file:boardType.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package yojson -package ppx_deriving_yojson -package cohttp.lwt -modules boardType.ml > boardType.ml.depends
# Target: tile.ml.depends, tags: { package(cohttp.lwt), package(ppx_deriving_yojson), package(yojson), extension:ml, file:tile.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package yojson -package ppx_deriving_yojson -package cohttp.lwt -modules tile.ml > tile.ml.depends
# Target: tile.cmo, tags: { package(cohttp.lwt), package(ppx_deriving_yojson), package(yojson), byte, compile, extension:cmo, extension:ml, file:tile.cmo, file:tile.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package yojson -package ppx_deriving_yojson -package cohttp.lwt -o tile.cmo tile.ml
# Target: heuristic.ml.depends, tags: { package(cohttp.lwt), package(ppx_deriving_yojson), package(yojson), extension:ml, file:heuristic.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package yojson -package ppx_deriving_yojson -package cohttp.lwt -modules heuristic.ml > heuristic.ml.depends
# Target: boardType.cmo, tags: { package(cohttp.lwt), package(ppx_deriving_yojson), package(yojson), byte, compile, extension:cmo, extension:ml, file:boardType.cmo, file:boardType.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package yojson -package ppx_deriving_yojson -package cohttp.lwt -o boardType.cmo boardType.ml
# Target: heuristic.cmo, tags: { package(cohttp.lwt), package(ppx_deriving_yojson), package(yojson), byte, compile, extension:cmo, extension:ml, file:heuristic.cmo, file:heuristic.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package yojson -package ppx_deriving_yojson -package cohttp.lwt -o heuristic.cmo heuristic.ml
# Target: minimax.ml.depends, tags: { package(cohttp.lwt), package(ppx_deriving_yojson), package(yojson), extension:ml, file:minimax.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package yojson -package ppx_deriving_yojson -package cohttp.lwt -modules minimax.ml > minimax.ml.depends
# Target: board.cmi, tags: { package(cohttp.lwt), package(ppx_deriving_yojson), package(yojson), byte, compile, extension:mli, file:board.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -package yojson -package ppx_deriving_yojson -package cohttp.lwt -o board.cmi board.mli
# Target: minimax.cmo, tags: { package(cohttp.lwt), package(ppx_deriving_yojson), package(yojson), byte, compile, extension:cmo, extension:ml, file:minimax.cmo, file:minimax.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package yojson -package ppx_deriving_yojson -package cohttp.lwt -o minimax.cmo minimax.ml
# Target: main.cmo, tags: { package(cohttp.lwt), package(ppx_deriving_yojson), package(yojson), byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package yojson -package ppx_deriving_yojson -package cohttp.lwt -o main.cmo main.ml
# Target: server_example.cmo, tags: { package(cohttp.lwt), package(ppx_deriving_yojson), package(yojson), byte, compile, extension:cmo, extension:ml, file:server_example.cmo, file:server_example.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package yojson -package ppx_deriving_yojson -package cohttp.lwt -o server_example.cmo server_example.ml
+ ocamlfind ocamlc -c -package yojson -package ppx_deriving_yojson -package cohttp.lwt -o server_example.cmo server_example.ml
File "server_example.ml", line 22, characters 27-52:
Error: This expression has type int but an expression was expected of type
         'a list
Command exited with code 2.
# Compilation unsuccessful.
