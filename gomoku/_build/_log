### Starting build.
# Target: test.ml.depends, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), extension:ml, file:test.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt -modules test.ml > test.ml.depends
# Target: board.mli.depends, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), extension:mli, file:board.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt -modules board.mli > board.mli.depends # cached
# Target: boardType.ml.depends, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), extension:ml, file:boardType.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt -modules boardType.ml > boardType.ml.depends # cached
# Target: tile.ml.depends, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), extension:ml, file:tile.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt -modules tile.ml > tile.ml.depends # cached
# Target: tile.cmo, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), byte, compile, extension:cmo, extension:ml, file:tile.cmo, file:tile.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt -o tile.cmo tile.ml # cached
# Target: boardType.cmo, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), byte, compile, extension:cmo, extension:ml, file:boardType.cmo, file:boardType.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt -o boardType.cmo boardType.ml # cached
# Target: heuristic.ml.depends, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), extension:ml, file:heuristic.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt -modules heuristic.ml > heuristic.ml.depends # cached
# Target: heuristic.cmo, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), byte, compile, extension:cmo, extension:ml, file:heuristic.cmo, file:heuristic.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt -o heuristic.cmo heuristic.ml # cached
# Target: board.cmi, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), byte, compile, extension:mli, file:board.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt -o board.cmi board.mli # cached
# Target: main.ml.depends, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), extension:ml, file:main.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt -modules main.ml > main.ml.depends # cached
# Target: minimax.ml.depends, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), extension:ml, file:minimax.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt -modules minimax.ml > minimax.ml.depends # cached
# Target: utils.ml.depends, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), extension:ml, file:utils.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt -modules utils.ml > utils.ml.depends # cached
# Target: utils.cmo, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), byte, compile, extension:cmo, extension:ml, file:utils.cmo, file:utils.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt -o utils.cmo utils.ml # cached
# Target: minimax.cmo, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), byte, compile, extension:cmo, extension:ml, file:minimax.cmo, file:minimax.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt -o minimax.cmo minimax.ml # cached
# Target: main.cmo, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt -o main.cmo main.ml # cached
# Target: test.cmo, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), byte, compile, extension:cmo, extension:ml, file:test.cmo, file:test.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt -o test.cmo test.ml
# Target: board.ml.depends, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), extension:ml, file:board.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt -modules board.ml > board.ml.depends # cached
# Target: tile.cmx, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), compile, extension:cmx, extension:ml, file:tile.cmx, file:tile.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt -o tile.cmx tile.ml # cached
# Target: boardType.cmx, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), compile, extension:cmx, extension:ml, file:boardType.cmx, file:boardType.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt -o boardType.cmx boardType.ml # cached
# Target: heuristic.cmx, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), compile, extension:cmx, extension:ml, file:heuristic.cmx, file:heuristic.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt -o heuristic.cmx heuristic.ml # cached
# Target: utils.cmx, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), compile, extension:cmx, extension:ml, file:utils.cmx, file:utils.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt -o utils.cmx utils.ml # cached
# Target: board.cmx, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), compile, extension:cmx, extension:ml, file:board.cmx, file:board.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt -o board.cmx board.ml # cached
# Target: minimax.cmx, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), compile, extension:cmx, extension:ml, file:minimax.cmx, file:minimax.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt -o minimax.cmx minimax.ml # cached
# Target: main.cmx, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), compile, extension:cmx, extension:ml, file:main.cmx, file:main.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt -o main.cmx main.ml # cached
# Target: test.cmx, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), compile, extension:cmx, extension:ml, file:test.cmx, file:test.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt -o test.cmx test.ml
# Target: test.native, tags: { package(cohttp.lwt), package(netstring), package(ppx_deriving_yojson), package(str), package(yojson), dont_link_with, extension:native, file:test.native, link, native, ocaml, program, quiet }
ocamlfind ocamlopt -linkpkg -package netstring -package str -package yojson -package ppx_deriving_yojson -package cohttp.lwt tile.cmx boardType.cmx heuristic.cmx utils.cmx board.cmx minimax.cmx main.cmx test.cmx -o test.native
# Compilation successful.
