/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dbousque <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2015/12/30 19:55:41 by dbousque          #+#    #+#             */
/*   Updated: 2016/01/02 19:42:03 by dbousque         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

int		error(int *nbs)
{
	if (nbs)
		free(nbs);
	nbs = NULL;
	ft_putendl_fd("Error", 2);
	return (0);
}

int		get_current_score(t_pile *pile_a, t_pile *pile_b)
{
	int		score;
	int		i;

	score = 0;
	i = pile_a->top;
	while (i < pile_a->length - 1)
	{
		if (pile_a->elts[i] > pile_a->elts[i + 1])
			score++;
		i++;
	}
	i = pile_b->top;
	while (i < pile_b->length - 1)
	{
		if (pile_b->elts[i] < pile_b->elts[i + 1])
			score++;
		i++;
	}
	score += nb_elts(pile_b);
	return (score);
}

char	is_sorted_ab(t_pile *pile, char is_a)
{
	int		i;

	i = pile->top;
	while (i < pile->length - 1)
	{
		if (is_a && pile->elts[i] > pile->elts[i + 1])
			return (0);
		else if (!is_a && pile->elts[i] < pile->elts[i + 1])
			return (0);
		i++;
	}
	return (1);
}

int		best_score_min_index(int scores[11])
{
	int		i;
	int		best;

	best = 0;
	i = 1;
	while (i < 11)
	{
		if (scores[best] == -1 || (scores[i] != -1 && scores[i] < scores[best]))
			best = i;
		i++;
	}
	return (best);
}

void	make_turn(t_pile *a, t_pile *b)
{
	int		current_score;
	int		scores[11];
	int		best;

	void_scores(scores);
	current_score = get_current_score(a, b);
	calculate_moves_score(a, b, scores);
	//ft_printf("current_score : %d\n", current_score);
	//print_scores(scores);
	best = best_score_min_index(scores);
	//ft_printf("best : %d\n", best);
	if (best != -1)
	{
		if (scores[4] == scores[best] && (current_score < scores[best] || (current_score == scores[best] && nb_elts(b) == 0)))
			best = 4;
		apply_function(a, b, best);
	}
}

void	sort_pile(t_pile *pile_a)
{
	t_pile	*pile_b;
	int		i;

	i = 0;
	pile_b = empty_pile();
	while (i < 8 && (!is_sorted_ab(pile_a, 1) || nb_elts(pile_b) > 0))
	{
		ft_printf("\n   PILE A : ");
		put_pile(pile_a);
		ft_printf("   PILE B : ");
		put_pile(pile_b);
		make_turn(pile_a, pile_b);
		if (!is_sorted_ab(pile_a, 1) || nb_elts(pile_b) > 0)
			ft_putstr(" ");
		i++;
	}
}

int		main(int argc, char **argv)
{
	int		*nbs;
	t_pile	*pile_a;

	nbs = get_nbs(argc, argv);
	if (!nbs || twice_same(argc - 1, nbs))
		return (error(nbs));
	if (!(pile_a = pile_from_array(nbs, argc - 1)))
		return (error(nbs));
	free(nbs);
	nbs = NULL;
	sort_pile(pile_a);
	put_pile(pile_a);
	/*ft_putstr("A : ");
	put_pile(pile_a);
	ft_putstr("B : ");
	put_pile(pile_b);
	push_b(pile_a, pile_b);

	ft_putstr("A : ");
	put_pile(pile_a);
	ft_putstr("B : ");
	put_pile(pile_b);
	swap_a(pile_a);

	ft_putstr("A : ");
	put_pile(pile_a);
	ft_putstr("B : ");
	put_pile(pile_b);
	push_a(pile_a, pile_b);

	ft_putstr("A : ");
	put_pile(pile_a);
	ft_putstr("B : ");
	put_pile(pile_b);
	swap_a(pile_a);

	
	ft_putstr("A : ");
	put_pile(pile_a);
	ft_putstr("B : ");
	put_pile(pile_b);*/
	return (0);
}
